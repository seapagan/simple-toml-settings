{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple TOML Settings","text":"<p>A Python library to save your settings in a TOML file.</p> <p>Development software</p> <p>Note that this library is still in the development and may contain bugs and/or change in the future. Please report any bugs you find on the issue tracker and feel free to make suggestions for improvements.</p> <p>A quick example:</p> <pre><code>from simple_toml_settings import TOMLSettings\n\nclass MySettings(TOMLSettings):\n    \"\"\"My settings class.\"\"\"\n\n    # Define the settings you want to save\n    name: str = \"My Name\"\n    age: int = 42\n    favourite_colour: str = \"blue\"\n    favourite_number: int = 42\n    favourite_foods: list = [\"pizza\", \"chocolate\", \"ice cream\"]\n\n\nsettings = MySettings(\"test_app\")\n</code></pre> <p>The above will automatically create a <code>Folder</code> in the user home directory called <code>.test_app</code>, a configuration file in this called 'config.toml` and then save the default settings to it.</p> <p>However, if the file already exists, the settings will be loaded from it.</p> <p>The file contents for the above example would be:</p> <pre><code>[test_app]\nage = 42\nfavourite_colour = \"blue\"\nfavourite_number = 42\nname = \"My Name\"\nschema_version = \"none\"\nfavourite_foods = [\"pizza\", \"chocolate\", \"ice cream\"]\n</code></pre> <p>Once you have created your settings class, you can use it like any other class:</p> <pre><code>settings = MySettings(\"test_app\")\nsettings.favourite_colour = \"red\"\nsettings.save()\n</code></pre> <p>See the rest of the documentation for more details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#040-2024-02-14","title":"0.4.0 (2024-02-14)","text":"<p>New Features</p> <ul> <li>Raise schema error if the file schema does not match the required schema (#111) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Add a SECURITY file (#120) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump mypy from 1.7.1 to 1.8.0 (#119) by dependabot[bot]</li> <li>Bump pymarkdownlnt from 0.9.15 to 0.9.17 (#118) by dependabot[bot]</li> <li>Bump pre-commit from 3.6.0 to 3.6.1 (#117) by dependabot[bot]</li> <li>Bump ruff from 0.1.8 to 0.2.1 (#116) by dependabot[bot]</li> <li>Bump pytest-sugar from 0.9.7 to 1.0.0 (#115) by dependabot[bot]</li> <li>Bump github-changelog-md from 0.8.0 to 0.8.1 (#114) by dependabot[bot]</li> <li>Bump pytest from 7.4.3 to 8.0.0 (#113) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.5.2 to 9.5.9 (#112) by dependabot[bot]</li> <li>Bump faker from 20.0.3 to 23.1.0 (#110) by dependabot[bot]</li> <li>Bump cryptography from 41.0.6 to 42.0.0 (#107) by dependabot[bot]</li> <li>and 33 more dependency updates</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#032-2023-11-02","title":"0.3.2 (2023-11-02)","text":"<p>Bug Fixes</p> <ul> <li>Don't save <code>None</code> values to the TOML file. (#49) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump pymarkdownlnt from 0.9.13.4 to 0.9.14 (#48) by dependabot[bot]</li> <li>Bump faker from 19.12.1 to 19.13.0 (#47) by dependabot[bot]</li> <li>Bump github-changelog-md from 0.3.0 to 0.5.0 (#46) by dependabot[bot]</li> <li>Bump faker from 19.11.0 to 19.12.1 (#45) by dependabot[bot]</li> <li>Bump pytest-asyncio from 0.21.1 to 0.22.0 (#44) by dependabot[bot]</li> <li>Bump pytest from 7.4.2 to 7.4.3 (#42) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.6 to 9.4.7 (#41) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#031-2023-10-28","title":"0.3.1 (2023-10-28)","text":"<p>Refactoring</p> <ul> <li>Change to new CHANGELOG generator. Mine :) (#38) by seapagan</li> <li>Migrate to ruff linter and formatter (#37) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump black from 23.10.0 to 23.10.1 (#36) by dependabot[bot]</li> <li>Bump pylint from 3.0.1 to 3.0.2 (#35) by dependabot[bot]</li> <li>Bump pylint-pytest from 1.1.2 to 1.1.3 (#34) by dependabot[bot]</li> <li>Bump pytest-mock from 3.11.1 to 3.12.0 (#33) by dependabot[bot]</li> <li>Bump pymdown-extensions from 10.3 to 10.3.1 (#32) by dependabot[bot]</li> <li>Bump faker from 19.10.0 to 19.11.0 (#31) by dependabot[bot]</li> <li>Bump black from 23.9.1 to 23.10.0 (#30) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.5.0 to 2.5.1 (#29) by dependabot[bot]</li> <li>Bump mypy from 1.6.0 to 1.6.1 (#28) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#030-2023-10-18","title":"0.3.0 (2023-10-18)","text":"<p>New Features</p> <ul> <li>Allow a Local config file (#25) by seapagan</li> <li>Add 'auto_create' option for config file, default True (#22) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Add missing repo section to docs (#21) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump urllib3 from 2.0.6 to 2.0.7 (#27) by dependabot[bot]</li> <li>Bump flake8-type-checking from 2.4.2 to 2.5.0 (#26) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.5 to 9.4.6 (#24) by dependabot[bot]</li> <li>Bump pre-commit from 3.4.0 to 3.5.0 (#23) by dependabot[bot]</li> <li>Bump pyfakefs from 5.2.4 to 5.3.0 (#20) by dependabot[bot]</li> <li>Bump faker from 19.9.0 to 19.10.0 (#19) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#022-2023-10-12","title":"0.2.2 (2023-10-12)","text":"<p>Bug Fixes</p> <ul> <li>Docs: fix same example error in README (#18) by seapagan</li> <li>Fix error on docs front page example code (#17) by seapagan</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#021-2023-10-12","title":"0.2.1 (2023-10-12)","text":"<p>Bug Fixes</p> <ul> <li>Add 'py.typed' file so mypy can typecheck package (#16) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump faker from 19.8.0 to 19.9.0 (#15) by dependabot[bot]</li> <li>Bump mypy from 1.5.1 to 1.6.0 (#14) by dependabot[bot]</li> <li>Bump pylint from 2.17.7 to 3.0.1 (#13) by dependabot[bot]</li> <li>Bump faker from 19.6.2 to 19.8.0 (#12) by dependabot[bot]</li> <li>Bump mkdocs-material from 9.4.4 to 9.4.5 (#11) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#020-2023-10-10","title":"0.2.0 (2023-10-10)","text":"<p>New Features</p> <ul> <li>Add a hook, called if the config file is missing and freshly created (#10) by seapagan</li> </ul> <p>Dependency Updates</p> <ul> <li>Bump pylint-pydantic from 0.2.4 to 0.3.0 (#9) by dependabot[bot]</li> <li>Bump actions/checkout from 3 to 4 (#7) by dependabot[bot]</li> </ul> <p><code>Full Changelog</code> | <code>Diff</code> | <code>Patch</code></p>"},{"location":"changelog/#010-2023-10-09","title":"0.1.0 (2023-10-09)","text":"<p>Merged Pull Requests</p> <ul> <li>Add test workflow to Github Actions (#2) by seapagan</li> </ul> <p>Refactoring</p> <ul> <li>Rename main settings class (#5) by seapagan</li> </ul> <p>Documentation</p> <ul> <li>Add basic documentation for the library (#3) by seapagan</li> </ul> <p>This changelog was generated using github-changelog-md by Seapagan</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-simple-toml-settings","title":"Contributing to Simple TOML Settings","text":"<p>Thank you for your interest in contributing to Simple TOML Settings! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager.</p> </li> <li> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> </li> <li> <p>This project requires Python 3.9 or higher.</p> </li> <li> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p> </li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing. Tests will automatically be run when you submit a pull request. You can also run them manually using the following command:</p> <pre><code>$ pytest\n</code></pre> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated using github-changelog-md, so please do not edit it manually.</p> <p>For maintainers, there is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>You would also need to add a GitHub Personal Access Token to a local config file as usual. See the section in that tools Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in any Pull Requests. This will be handled by the maintainers when a new release is made. Your GitHub username will be added to the changelog automatically beside your PR.</p>"},{"location":"contributing/#convenience-tasks","title":"Convenience Tasks","text":"<p>There are a few other convenience tasks that can be run using the <code>poe</code> command. These are defined in the <code>pyproject.toml</code> file.</p> <p>Each of these tasks can have extra options added which will be passed to the underlying tool.</p> <p>Run <code>mypy</code> on the code base in strict mode:</p> <pre><code>$ poe mypy\n</code></pre> <p>Format the code using <code>ruff format</code>:</p> <pre><code>$ poe format\n</code></pre> <p>Lint the code using <code>ruff</code>:</p> <pre><code>$ poe ruff\n</code></pre> <p>Check the Markdown:</p> <pre><code>$ poe markdown\n</code></pre> <p>Run <code>ruff</code>, <code>mypy</code> and <code>format</code> at the same time:</p> <pre><code>$ poe lint\n</code></pre>"},{"location":"contributing/#documentation-tasks","title":"Documentation Tasks","text":"<p>These are to help with developing and updating the documentation.</p> <ul> <li><code>poe docs:serve</code> - Serve the MkDocs locally for testing and development</li> <li><code>poe docs:serve:all</code> - Same as above, but opens to all interfaces so you can   view it on other devices on your network</li> <li><code>poe docs:build</code> - Build the MkDocs site into the <code>dist</code> folder</li> <li><code>poe docs:publish</code> - Publish the docs to your GitHub pages. Note that only   those with write-access to this repo can do this.</li> </ul>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to Py-Maker:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. We are using   Ruff as both a linter and code formatter.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>Use GitHub issues   to report bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code> one is a must though.</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"future-plans/","title":"Future Plans","text":""},{"location":"future-plans/#future-plans","title":"Future Plans","text":"<ul> <li>Allow a custom folder root (not just users $HOME) folder, as well as custom   file name.</li> <li>Add an option to just store the config file in the users home directory. The   default option of putting it in a sub-folder of the project is useful for   projects that need to store extra data, but may be overkill for basic   projects.</li> <li>Add Option to look for the config file in the current directory, and if not   found then look in the users home directory.</li> <li>Add an Option to not include the <code>schema_version</code> key. By default this key   will be included. This will only be ommited if the <code>schema_version</code> is   'none'.</li> <li>Allow a global config file to be used, which will be overridden by a local   config file if it exists.</li> <li>option to not save config options that have the same value as the default.</li> <li>by default save should not save config options that are not already in the   config file, though leave the current behavior as an option.</li> <li>raise a specific custom exception for malformed TOML files</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>You should install this package into a virtual environment.  You can use Poetry to do this:</p> <pre><code>$ poetry add simple-toml-settings\n</code></pre> <p>If you don't want to use Poetry, you can use pip:</p> <pre><code>$ pip install simple-toml-settings\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright 2023-2024 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/","title":"Usage","text":"<p>This library is designed to be simple to use, to save and load settings from a TOML file with a minimal of configuration.</p> <p>Warning</p> <p>The current library access methods are not set in stone and may change in the future. We will try to keep the changes to a minimum and will provide a migration path (and backwards compatibility) if we do change them.</p>"},{"location":"usage/#setup","title":"Setup","text":"<p>Create a class that inherits from the <code>TOMLSettings</code> class and define the settings you want to save as class attributes:</p> <pre><code>from simple_toml_settings import TOMLSettings\n\nclass MySettings(TOMLSettings):\n    \"\"\"My settings class.\"\"\"\n\n    # Define the settings you want to save\n    name: str = \"My Name\"\n    age: int = 53\n    favourite_colour: str = \"blue\"\n    favourite_number: int = 42\n    favourite_foods: list = [\"pizza\", \"chocolate\", \"ice cream\"]\n    sub_settings: dict = {\n        \"sub_setting_1\": \"sub setting 1 text\",\n        \"sub_setting_2\": \"sub setting 2 text\",\n    }\n\nsettings = MySettings(\"my_app_name\")\n</code></pre> <p>Use Type-hinting</p> <p>Always use typing hints for your settings as shown above.  This will allow the library to automatically convert the settings to the correct type when loading them.</p> <p>The above will automatically create a sub folder in the user's home directory called <code>.my_app_name</code> and will create a TOML file in it called <code>config.toml</code> containing the default settings. If the file already exists, the settings will be loaded from it.</p> <p>The file contents for the above example would be:</p> <pre><code>[my_app_name]\nage = 53\nfavourite_colour = \"blue\"\nfavourite_number = 42\nname = \"My Name\"\nschema_version = \"none\"\nfavourite_foods = [\"pizza\", \"chocolate\", \"ice cream\"]\n\n[my_app_name.sub_settings]\nsub_setting_1 = \"sub setting 1 text\"\nsub_setting_2 = \"sub setting 2 text\"\n</code></pre> <p>The above shows how lists are saved as TOML arrays and dictionaries are saved as TOML tables.</p> <p><code>schema_version</code> key [optional]</p> <p>This is used to track the version of the schema used to save the settings.  If you change the settings in your app in such a way to make older versions incompatible, you should increment the schema version.  If the schema version is not set, it will default to <code>none</code>.</p> <p>The schema is checked when the settings are loaded and if the schema version in the file is different to the schema version in the class, an exception will be raised (<code>simple_toml_settings.exceptions.SettingsSchemaError</code>). You can catch this exception and handle it as you wish.</p> <p>If the schema version is set to <code>none</code> (or missing) in the file, no schema checking will be performed and no exception raised.</p> <p>By default the <code>schema_version</code> is set to <code>none</code>.  You can change this by passing it to the custom class on creation:</p> <pre><code>settings = MySettings(\"my_app_name\", schema_version=\"1.0.0\")\n</code></pre> <p>By default, the settings will be saved in a file called <code>config.toml</code> in a subfolder of the user's home directory.  You can change this by passing a different filename on creation:</p> <pre><code>settings = MySettings(\"my_app_name\", settings_file_name=\"my_settings.toml\")\n</code></pre> <p>The subfolder will be created if it does not exist, and is the same as the app name but with a <code>.</code> prepended to it.  So, for the above example, the settings will be saved as <code>~/.my_app_name/my_settings.toml</code>.</p> <p>Note</p> <p>In future versions the folder name will be configurable, and the folder itself will be optional, so the file can be stored in the user's home folder directly.</p>"},{"location":"usage/#using-the-settings","title":"Using the settings","text":"<p><code>None</code> values</p> <p>The library does not support saving <code>None</code> values.  If you need to save a <code>None</code> value, you should use a different value (such as an empty string or <code>0</code>) and convert it to <code>None</code> in your app.</p> <p>This is because TOML does not support <code>None</code> values and the library will convert <code>None</code> values to <code>null</code> when saving the settings.</p> <p>We may add support for this in the future, but for now you should avoid using <code>None</code> values unless they are a default and will never need to be saved - any <code>None</code> value will not be saved to the config file.</p> <p>Once you have created your settings class, you can use it like any other class:</p> <pre><code>settings = MySettings(\"my_app_name\")\nname = settings.name\nsettings.name = \"My New Name\"\n</code></pre> <p>There are also <code>get</code> and <code>set</code> methods that can be used to access the settings, this is the preferred method though both methods are supported:</p> <pre><code>settings = MySettings(\"my_app_name\")\nname = settings.get(\"name\")\nsettings.set(\"name\", \"My New Name\")\n</code></pre> <p>The <code>get</code> method will return <code>None</code> if the setting does not exist.</p> <p>The advantage of using the <code>set</code> method is that it will automatically save the changed variable to the config file.  If you use the class attributes directly, you will need to call the <code>save</code> method to save the settings:</p> <pre><code>settings = MySettings(\"my_app_name\")\nsettings.name = \"My New Name\"\nsettings.save()\n</code></pre> <p>Finally, you can use the <code>load</code> and <code>save</code> methods to load and save the settings manually:</p> <pre><code>settings = MySettings(\"my_app_name\")\nsettings.load()\nsettings.set(\"name\", \"My New Name\")\nsettings.save()\n</code></pre> <p>Note</p> <p>The <code>load()</code> and <code>save()</code> methods are automatically called when the class is created and when the <code>set</code> method is called respectively.  You should not need to call <code>load()</code> manually.</p>"},{"location":"usage/#options","title":"Options","text":"<p>There are a couple of options you can pass to the <code>TOMLSettings</code> constructor to change the behaviour of the class:</p>"},{"location":"usage/#settings_file_name","title":"<code>settings_file_name</code>","text":"<p>This is the name of the settings file to use.  By default this is set to <code>config.toml</code>.</p>"},{"location":"usage/#auto_create","title":"<code>auto_create</code>","text":"<p>This defaults to <code>True</code> and will automatically create the settings file if it does not exist and fill it with the default values.  If set to <code>False</code>, the class will raise an exception (<code>simple_toml_settings.exceptions.SettingsNotFoundError</code>) if the settings file does not exist. You can catch this exception and handle it as you wish. The folder will be created anyway if it does not exist, as the assumption is that you will want to save the settings at some point.</p> <p>Deprecation warning</p> <p>The exception was originally called <code>SettingsNotFound</code> but has been renamed to <code>SettingsNotFoundError</code> to be more consistent with Python naming conventions.  The old name still works, but will be removed in a future release.</p>"},{"location":"usage/#local_file","title":"<code>local_file</code>","text":"<p>This defaults to <code>False</code> and will cause the settings file to be saved/read from the current directory instead of the user's home directory.  This is good for utility apps that need different settings for different projects / filelists.</p>"},{"location":"usage/#post-create-hook","title":"Post-create hook","text":"<p>If you need to do some further processing, or set some input from the user after the new config file has been created (for example to fill in the default values with some real data), you can override the <code>__post_create_hook__()</code> method in your class:</p> <pre><code>from simple_toml_settings import TOMLSettings\n\nclass MySettings(TOMLSettings):\n    \"\"\"My settings class.\"\"\"\n\n    # Define the settings you want to save\n    name: str = \"My Name\"\n    age: int = 53\n    favourite_colour: str = \"blue\"\n    favourite_number: int = 42\n    favourite_foods: list = [\"pizza\", \"chocolate\", \"ice cream\"]\n    sub_settings: dict = {\n        \"sub_setting_1\": \"sub setting 1 text\",\n        \"sub_setting_2\": \"sub setting 2 text\",\n    }\n\n    def __post_create_hook__(self):\n        \"\"\"Post create hook.\"\"\"\n        self.name = input(\"Enter your name: \")\n        self.age = int(input(\"Enter your age: \"))\n        self.favourite_colour = input(\"Enter your favourite colour: \")\n        self.favourite_number = int(input(\"Enter your favourite number: \"))\n</code></pre> <p>Note</p> <p>This is a special method that is called automatically after the config file has been created.  It is not a normal method and should not be called directly. It is NOT called when an existing config file is loaded.</p> <p>The <code>save()</code> method will be called automatically after the hook has been executed. There is no need to call the <code>super()</code> method in your hook since it is just a placeholder method.</p>"}]}