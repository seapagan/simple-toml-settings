{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Simple TOML Settings","text":"<p>A Python library to save your settings in a TOML file.</p> <p>Development software</p> <p>Note that this library is still in the early stages of development and may contain bugs and/or change in the future.  Please report any bugs you find on the issue tracker and feel free to make suggestions for improvements.</p> <p>A quick example:</p> <pre><code>from simple_toml_settings import Settings\n\nclass MySettings(Settings):\n    \"\"\"My settings class.\"\"\"\n\n    # Define the settings you want to save\n    name: str = \"My Name\"\n    age: int = 42\n    favourite_colour: str = \"blue\"\n    favourite_number: int = 42\n    favourite_foods: list = [\"pizza\", \"chocolate\", \"ice cream\"]\n\n\nsettings = MySettings(\"my_app_name\")\n</code></pre> <p>The above will automatically create a TOML file in the user's home directory called <code>config.toml</code> and save the settings to it. If the file already exists, the settings will be loaded from it.</p> <p>The file contents for the above example would be:</p> <pre><code>[test_app]\nage = 42\nfavourite_colour = \"blue\"\nfavourite_number = 42\nname = \"My Name\"\nschema_version = \"none\"\nfavourite_foods = [\"pizza\", \"chocolate\", \"ice cream\"]\n</code></pre> <p>Once you have created your settings class, you can use it like any other class:</p> <pre><code>settings = MySettings(\"my_app_name\")\nname = settings.name\nsettings.favourite_colour = \"red\"\nsettings.save()\n</code></pre> <p>See the rest of the documentation for more details.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#010-2023-10-09","title":"0.1.0 (2023-10-09)","text":"<p>Full Changelog</p> <p>Documentation:</p> <ul> <li>Add basic documentation for the library #3 (seapagan)</li> </ul> <p>Merged pull requests:</p> <ul> <li>rename main settings class #5 (seapagan)</li> <li>Add test workflow to Github Actions #2 (seapagan)</li> </ul> <p>* This Changelog was automatically generated by github_changelog_generator</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-simple-toml-settings","title":"Contributing to Simple TOML Settings","text":"<p>Thank you for your interest in contributing to Simple TOML Settings! We welcome all contributions, big or small.</p> <p>If you are not sure where to start, please take a look at the open issues. If you have an idea for a new feature or would like to report a bug, please open a new issue.</p> <p>We also welcome contributions to the documentation. If you find any errors or would like to suggest improvements, please open a new issue or submit a pull</p>"},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Since this is a Python project, you will need to have Python installed on your machine. You can download the latest version of Python from the official website or using your Operating system's package manager.</p> </li> <li> <p>I'd recommend using pyenv to manage your Python installations, the pyenv-installer works for Linux and Mac OS X. For Windows, you can use the pyenv-win port. See here for installation instructions.</p> </li> <li> <p>This project requires Python 3.9 or higher.</p> </li> <li> <p>We also use Poetry to manage our dependencies. You should have this installed as well. You can install Poetry by following the instructions on the Poetry website.</p> </li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before you start contributing, please make sure you have read and understood our Code of Conduct and License.</p> <p>To get started, follow these steps:</p> <ol> <li>Fork the repository and clone it to your local machine.</li> <li>Install the required dependencies (see next section).</li> <li>Create a new branch for your changes: <code>git checkout -b my-new-feature</code>.</li> <li>Make your changes and commit them: <code>git commit -am 'Add some feature'</code>.</li> <li>Push your changes to your fork: <code>git push origin my-new-feature</code>.</li> <li>Create a new pull request.</li> </ol>"},{"location":"contributing/#install-dependencies","title":"Install Dependencies","text":"<p>Run the following command to install the required dependencies:</p> <pre><code>$ poetry install\n</code></pre> <p>You then need to activate the virtual environment:</p> <pre><code>$ poetry shell\n</code></pre> <p>From here you can start working on the project. If you are using an IDE such as VSCode or PyCharm, you can set their Python interpreter setting to use the virtual environment that has just been created.</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all staged files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>We are using pytest for testing. Tests will automatically be run when you submit a pull request. You can also run them manually using the following command:</p> <pre><code>$ pytest\n</code></pre> <p>If you add any new features, please add tests for them. This will help us to ensure that the code is working as expected and will prevent any regressions.</p>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>The changelog is automatically generated, so please do not edit it manually.</p> <p>For information, it is generated using a Ruby gem called GitHub Changelog Generator. There is a POE task that will run this and update the changelog file.</p> <pre><code>$ poe changelog\n</code></pre> <p>you also need to add a GitHub Personal Access Token to the config file. See the section in the Documentation for information.</p> <p>However, you should NOT include a change to the <code>CHANGELOG.md</code> file in your Pull Requests. This will be handled by the maintainers when a new release is made.</p>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<p>Here are some guidelines to follow when contributing to Py-Maker:</p> <ul> <li>Follow the PEP 8 style guide. The   pre-commit hooks will check for this. Black   is installed and this is the format we are using.</li> <li>Try to have no linting errors or warnings. The pre-commit hooks will check for   this also. Flake8 is installed and   there are a few other linters that are run as well.</li> <li>MyPy is installed and we are using   type hints. Please try to add type hints to your code. If you see any areas of   the code that are missing type hints, please feel free to open a PR and add   them \ud83d\ude01!</li> <li>Write clear and concise commit messages.</li> <li>Write tests for your code.</li> <li>Make sure your code passes all tests before submitting a pull request.</li> <li>Document your code using   docstrings.</li> <li>Use GitHub issues   to report bugs or suggest new features.</li> </ul> <p>If you are using VSCode, there is a config file in the <code>.vscode</code> folder that will help you to follow these guidelines. You may need to install some extensions to get the most out of it. I'll add a list of recommended extensions here soon. The <code>Python</code> one is a must though.</p>"},{"location":"contributing/#contact","title":"Contact","text":"<p>If you have any questions or need help with contributing, please contact me @seapagan on GitHub. You can also use the GitHub Discussions feature.</p> <p>Happy contributing!</p>"},{"location":"future-plans/","title":"Future Plans","text":""},{"location":"future-plans/#future-plans","title":"Future Plans","text":"<ul> <li>Allow a custom folder root (not just users $HOME) folder, as well as custom   file name. Perhaps option to just store the config file in the users home   directory? The default option of putting it in a sub-folder of the project is   useful for projects that need to store extra data, but may be overkill for   basic projects.</li> <li>add an Option to not include the <code>schema_version</code> key. By default this key   will be included.</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>You should install this package into a virtual environment.  You can use Poetry to do this:</p> <pre><code>$ poetry add simple-toml-settings\n</code></pre> <p>If you don't want to use Poetry, you can use pip:</p> <pre><code>$ pip install simple-toml-settings\n</code></pre>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright 2023 Grant Ramsay</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"usage/","title":"Usage","text":"<p>This library is designed to be simple to use, to save and load settings from a TOML file with a minimal of configuration.</p>"},{"location":"usage/#setup","title":"Setup","text":"<p>Create a class that inherits from the <code>TOMLSettings</code> class and define the settings you want to save as class attributes:</p> <pre><code>from simple_toml_settings import TOMLSettings\n\nclass MySettings(TOMLSettings):\n    \"\"\"My settings class.\"\"\"\n\n    # Define the settings you want to save\n    name: str = \"My Name\"\n    age: int = 42\n    favourite_colour: str = \"blue\"\n    favourite_number: int = 42\n    favourite_foods: list = [\"pizza\", \"chocolate\", \"ice cream\"]\n    sub_settings: dict = {\n        \"sub_setting_1\": \"sub setting 1 text\",\n        \"sub_setting_2\": \"sub setting 2 text\",\n    }\n\nsettings = MySettings(\"my_app_name\")\n</code></pre> <p>Use Type-hinting</p> <p>Always use typing hints for your settings as shown above.  This will allow the library to automatically convert the settings to the correct type when loading them.</p> <p>The above will automatically create a sub folder in the user's home directory called <code>.my_app_name</code> and will create a TOML file in it called <code>config.toml</code> containing the default settings. If the file already exists, the settings will be loaded from it.</p> <p>The file contents for the above example would be:</p> <pre><code>[my_app_name]\nage = 42\nfavourite_colour = \"blue\"\nfavourite_number = 42\nname = \"My Name\"\nschema_version = \"none\"\nfavourite_foods = [\"pizza\", \"chocolate\", \"ice cream\"]\n\n[my_app_name.sub_settings]\nsub_setting_1 = \"sub setting 1 text\"\nsub_setting_2 = \"sub setting 2 text\"\n</code></pre> <p>The above shows how lists are saved as TOML arrays and dictionaries are saved as TOML tables.</p> <p><code>schema_version</code> key</p> <p>This is used to track the version of the schema used to save the settings.  If you change the settings in your app in such a way to make older versions incompatible, you should increment the schema version.  At the moment, this is not used for anything, but it will be used in the future to detect outdated settings files and to allow automatic migration of settings.</p> <p>By default the <code>schema_version</code> is set to <code>none</code>.  You can change this by passing it to the custom class on creation:</p> <pre><code>settings = MySettings(\"my_app_name\", schema_version=\"1.0.0\")\n</code></pre> <p>By default, the settings will be saved in a file called <code>config.toml</code> in the user's home directory.  You can change this by passing a different filename on creation:</p> <pre><code>settings = MySettings(\"my_app_name\", settings_file_name=\"my_settings.toml\")\n</code></pre>"},{"location":"usage/#using-the-settings","title":"Using the settings","text":"<p>Once you have created your settings class, you can use it like any other class:</p> <pre><code>settings = MySettings(\"my_app_name\")\nname = settings.name\nsettings.name = \"My New Name\"\n</code></pre> <p>There are also <code>get</code> and <code>set</code> methods that can be used to access the settings, this is the preferred method though both methods are supported:</p> <pre><code>settings = MySettings(\"my_app_name\")\nname = settings.get(\"name\")\nsettings.set(\"name\", \"My New Name\")\n</code></pre> <p>The <code>get</code> method will return <code>None</code> if the setting does not exist.</p> <p>The advantage of using the <code>set</code> method is that it will automatically save the changed variable to the config file.  If you use the class attributes directly, you will need to call the <code>save</code> method to save the settings:</p> <pre><code>settings = MySettings(\"my_app_name\")\nsettings.name = \"My New Name\"\nsettings.save()\n</code></pre> <p>Finally, you can use the <code>load</code> and <code>save</code> methods to load and save the settings manually:</p> <pre><code>settings = MySettings(\"my_app_name\")\nsettings.load()\nsettings.set(\"name\", \"My New Name\")\nsettings.save()\n</code></pre> <p>Note</p> <p>The <code>load()</code> and <code>save()</code> methods are automatically called when the class is created and when the <code>set</code> method is called respectively.  You should not need to call <code>load()</code> manually.</p> <p>Warning</p> <p>The current library access methods are not set in stone and may change in the future. We will try to keep the changes to a minimum and will provide a migration path (and backwards compatibility) if we do change them.</p>"}]}